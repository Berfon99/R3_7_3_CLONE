apply plugin: 'com.android.application'
ext {
    play_services_version = "15.0.1"
    support_version = "29.0.0"
}
configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:1.8.22"
        force "org.jetbrains.kotlin:kotlin-stdlib-common:1.8.22"
        force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22"
        force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22"
    }
}
android {
    namespace "com.xc.r3"
    compileSdkVersion 34
    defaultConfig {
        applicationId "com.xc.r3"
        minSdkVersion 27
        targetSdkVersion 34
        versionCode 3000
        versionName "3.0" //Brand new with 4 actions based on AI, one AIRÂ³ Manager for all units, new theme.xml file and change for new terrain type
        useLibrary 'org.apache.http.legacy'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    signingConfigs {
        key {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("${System.properties['user.home']}/.android/debug.keystore")
            storePassword 'android'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_19
        targetCompatibility JavaVersion.VERSION_19
    }
        buildTypes {
        debug {
            signingConfig signingConfigs.key
        }
    }
    buildFeatures {
        buildConfig = true
        viewBinding = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.sun.mail:android-mail:1.6.2"
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation "androidx.core:core:1.6.0"
    implementation 'com.google.guava:guava:31.0.1-android'

    // Google Drive
    implementation "com.google.android.gms:play-services-auth:$play_services_version"
    implementation "com.google.android.gms:play-services-drive:$play_services_version"
    implementation 'org.apache.httpcomponents:httpcore:4.4.9'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation "com.squareup.okio:okio:1.14.0"
    implementation "org.jetbrains:annotations:15.0"
    // Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
}

// Custom task to extract versionName and comment
// Check
task generateVersionHistory {
    group = "Custom"
    description = "Generates a version history file from the versionName and its comment."

    doLast {
        def buildFile = project.file("build.gradle")
        def versionHistoryFile = project.file("version_history.txt")
        def lastVersionFile = project.file("last_version.txt")

        // Create the directory if it doesn't exist
        def versionHistoryDir = versionHistoryFile.parentFile
        if (!versionHistoryDir.exists()) {
            versionHistoryDir.mkdirs()
        }

        if (!versionHistoryFile.exists()) {
            versionHistoryFile.createNewFile()
        }
        if (!lastVersionFile.exists()) {
            lastVersionFile.createNewFile()
        }

        def lines = buildFile.readLines()
        String versionNameLine = null
        for (String line in lines) {
            if (line.trim().startsWith("versionName")) {
                versionNameLine = line
                break
            }
        }

        if (versionNameLine != null) {
            def versionName = versionNameLine.substring(versionNameLine.indexOf('"') + 1, versionNameLine.lastIndexOf('"'))
            def comment = versionNameLine.substring(versionNameLine.indexOf("//") + 2).trim()
            def currentVersionLine = "$versionName - $comment\n"

            def lastVersion = lastVersionFile.text.trim()

            if (currentVersionLine.trim() != lastVersion.trim()) {
                versionHistoryFile.append(currentVersionLine)
                lastVersionFile.write(currentVersionLine)
            }
        } else {
            println("versionName not found in build.gradle")
        }
    }
}

tasks.configureEach {
    if (name == "build") {
        dependsOn generateVersionHistory
    }
}